uniform sampler2D R_diffuse;
uniform vec3 C_camera;
uniform float specularIntensity;
uniform float specularPower;

struct BaseLight
{
    vec3 color;
    float intensity;
};
struct Attenuation
{
	float constant;
	float linear;
	float exponent;
};
struct PointLight
{
	BaseLight base;
	Attenuation atten;
	vec3 position;
	float range;
};
struct SpotLight
{
	PointLight pointLight;
	vec3 direction;
	float cutoff;
};
struct DirectionalLight
{
    BaseLight base;
    vec3 direction;
};


vec4 calcLight(BaseLight base, vec3 direction, vec3 normal,vec3 worldPos)
{
    float diffuseFactor = dot(normal, -direction);
    
    vec4 diffuseColor = vec4(0,0,0,0);
    vec4 specularColor = vec4(0,0,0,0);
    
    if(diffuseFactor > 0)
    {
        diffuseColor = vec4(base.color, 1.0) * base.intensity * diffuseFactor;
        
        vec3 cameraDirection = normalize(C_camera - worldPos);
        //vec3 reflectDirection = normalize(reflect(direction, normal));
        vec3 halfDirection = normalize(cameraDirection-direction);
        
        float specularFactor = dot(halfDirection,normal);
        //float specularFactor = dot(cameraDirection, reflectDirection);
        specularFactor = pow(specularFactor, specularPower);
        
        if(specularFactor > 0)
        {
            specularColor = vec4(base.color, 1.0) * specularIntensity * specularFactor;
        }
    }
    
    return diffuseColor + specularColor;
}

vec4 calcPointLight(PointLight light,vec3 normal, vec3 worldPos){
vec3 lightdirection = worldPos - light.position;
float distanceToPoint = length(lightdirection);

if(distanceToPoint > light.range)
	return vec4(0,0,0,0);

lightdirection = normalize(lightdirection);
vec4 color = calcLight(light.base,lightdirection,normal,worldPos);
float attenuation = light.atten.constant+
					light.atten.linear*distanceToPoint+
					light.atten.exponent * distanceToPoint *distanceToPoint +
					0.0001;
return color/attenuation;
}

vec4 calcSpotLight(SpotLight spotlight,vec3 normal,vec3 worldPos){
	vec3 lightDirection = normalize(worldPos-spotlight.pointLight.position);
	float spotFactor = dot(lightDirection,spotlight.direction);
	vec4 color = vec4(0,0,0,0);
	if(spotFactor > spotlight.cutoff){
	color = calcPointLight(spotlight.pointLight,normal,worldPos)*(1.0-(1.0-spotFactor)/(1.0-spotlight.cutoff));
	}
	return color;
}

vec4 calcDirectionalLight(DirectionalLight directionalLight, vec3 normal, vec3 worldPos)
{
    return calcLight(directionalLight.base, -directionalLight.direction, normal,worldPos);
}

